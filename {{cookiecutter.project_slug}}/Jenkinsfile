#!groovy

pipeline {

  agent {
    label 'node'
  }

  options {

    // General Jenkins job properties
    buildDiscarder(logRotator(numToKeepStr:'20'))

    // Declarative-specific options
    skipDefaultCheckout()

    // "wrapper" steps that should wrap the entire build execution
    timeout(time: 240, unit: 'MINUTES')
  }

  stages {

    // --- BUILD ---
    stage('Build') {
      parallel {
        stage('Backend') {
          agent {
            label "node"
          }
          steps {
            deleteDir()
            checkout scm
            sh 'make build-backend'
            sh 'tar cfz backend.tgz api Makefile'
            stash includes: 'backend.tgz', name: 'backend.tgz'
          }
        }
        stage('Frontend') {
          agent {
            label "node"
          }
          steps {
            deleteDir()
            checkout scm
            sh "make build-frontend"
            sh 'tar cfz frontend.tgz locales node_modules public src theme .babelrc .eslintrc jsconfig.json Makefile package.json razzle.config.js yarn.lock'
            stash includes: 'frontend.tgz', name: 'frontend.tgz'
          }
        }
      }
    }

    // Static Code Analysis
    stage('Static Code Analysis') {
      agent {
        label 'node'
      }
      steps {
        deleteDir()
        unstash 'backend.tgz'
        sh 'tar xfz backend.tgz'
        sh 'make code-analysis'
      }
      post {
        always {
          step([$class: 'WarningsPublisher',
            parserConfigurations: [[
              parserName: 'Pep8',
              pattern: 'api/parts/code-analysis/flake8.log'
            ]],
            unstableTotalAll: '0',
            usePreviousBuildAsReference: true
          ])
        }
      }
    }

    // -- UNIT TESTS ---
    stage('Unit Tests') {
      parallel {
        stage('Backend') {
          agent {
            label 'node'
          }
          steps {
            deleteDir()
            unstash 'backend.tgz'
            sh 'tar xfz backend.tgz'
            sh 'rm -rf bin'
            sh "make test-backend"
          }
          post {
            always {
              step([
                $class: 'JUnitResultArchiver',
                testResults: 'api/parts/test/testreports/*.xml'
              ])
            }
          }
        }
        stage('Frontend') {
          agent {
            label 'node'
          }
          steps {
            deleteDir()
            unstash 'frontend.tgz'
            sh 'tar xfz frontend.tgz'
            sh "CI=true make test-frontend"
          }
          // post {
          //   always {
          //     step([
          //       $class: 'JUnitResultArchiver',
          //       testResults: 'frontend/junit.xml'
          //     ])
          //   }
          // }
        }
      }
    }

    // Acceptance Tests
    // stage('Acceptance Tests') {
    //   agent {
    //     label 'node'
    //   }
    //   steps {
    //     deleteDir()
    //     unstash 'build.tgz'
    //     sh 'tar xfz build.tgz'
    //     wrap([$class: 'Xvfb']) {
    //       sh 'make test-acceptance'
    //     }
    //   }
    //   post {
    //     always {
    //       step([
    //         $class: 'RobotPublisher',
    //         disableArchiveOutput: false,
    //         logFileName: 'parts/test/robot_log.html',
    //         onlyCritical: true,
    //         otherFiles: '**/*.png',
    //         outputFileName: 'parts/test/robot_output.xml',
    //         outputPath: '.',
    //         passThreshold: 100,
    //         reportFileName: 'parts/test/robot_report.html',
    //         unstableThreshold: 0
    //       ]);
    //     }
    //   }
    // }

    // --- DEPLOYMENT TO {{cookiecutter.project_slug}} ---
    stage('Deployment to {{cookiecutter.project_slug}}') {
      parallel {
        stage('Backend') {
          agent {
            label 'kitconcept.io'
          }
          when {
            branch 'master'
          }
          steps {
            sh '(cd /srv/{{cookiecutter.project_slug}} && git fetch --all && git reset --hard origin/master)'
            sh '(cd /srv/{{cookiecutter.project_slug}}/api && bin/supervisorctl stop all)'
            sh '(cd /srv/{{cookiecutter.project_slug}}/api && bin/buildout -c dev.cfg)'
            sh '(cd /srv/{{cookiecutter.project_slug}}/api && bin/supervisorctl start all)'
          }
        }
        stage('Frontend') {
          agent {
            label 'kitconcept.io'
          }
          when {
            branch 'master'
          }
          steps {
            deleteDir()
            checkout scm
            sh '(cd /srv/{{cookiecutter.project_slug}} && yarn install)'
            sh '(cd /srv/{{cookiecutter.project_slug}} && PORT=11002 RAZZLE_API_PATH=https://{{cookiecutter.project_slug}}/api yarn build)'
            sh '(cd /srv/{{cookiecutter.project_slug}} && pm2 restart milford-dev)'
          }
        }
      }
    }

  }

  post {
    success {
      slackSend (
        color: 'good',
        message: "SUCCESS: #${env.BUILD_NUMBER} ${env.JOB_NAME} (${env.BUILD_URL})"
      )
    }
    failure {
      slackSend (
        color: 'danger',
        message: "FAILURE: #${env.BUILD_NUMBER} ${env.JOB_NAME} (${env.BUILD_URL})"
      )
    }
    unstable {
      slackSend (
        color: 'warning',
        message: "UNSTABLE: #${env.BUILD_NUMBER} ${env.JOB_NAME} (${env.BUILD_URL})"
      )
    }
    aborted {
      slackSend (
        color: 'danger',
        message: "ABORTED: #${env.BUILD_NUMBER} ${env.JOB_NAME} (${env.BUILD_URL})"
      )
    }
  }
}
